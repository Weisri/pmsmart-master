package com.pm.intelligent.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pm.intelligent.bean.SwitchsEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SWITCHS_ENTITY".
*/
public class SwitchsEntityDao extends AbstractDao<SwitchsEntity, Long> {

    public static final String TABLENAME = "SWITCHS_ENTITY";

    /**
     * Properties of entity SwitchsEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property HardwareId = new Property(1, int.class, "hardwareId", false, "HARDWARE_ID");
        public final static Property ProtocolId = new Property(2, String.class, "protocolId", false, "PROTOCOL_ID");
        public final static Property SwitchName = new Property(3, String.class, "switchName", false, "SWITCH_NAME");
        public final static Property ParamState = new Property(4, String.class, "paramState", false, "PARAM_STATE");
        public final static Property Iccid = new Property(5, String.class, "iccid", false, "ICCID");
    }


    public SwitchsEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SwitchsEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SWITCHS_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"HARDWARE_ID\" INTEGER NOT NULL UNIQUE ," + // 1: hardwareId
                "\"PROTOCOL_ID\" TEXT," + // 2: protocolId
                "\"SWITCH_NAME\" TEXT," + // 3: switchName
                "\"PARAM_STATE\" TEXT," + // 4: paramState
                "\"ICCID\" TEXT);"); // 5: iccid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SWITCHS_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SwitchsEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getHardwareId());
 
        String protocolId = entity.getProtocolId();
        if (protocolId != null) {
            stmt.bindString(3, protocolId);
        }
 
        String switchName = entity.getSwitchName();
        if (switchName != null) {
            stmt.bindString(4, switchName);
        }
 
        String paramState = entity.getParamState();
        if (paramState != null) {
            stmt.bindString(5, paramState);
        }
 
        String iccid = entity.getIccid();
        if (iccid != null) {
            stmt.bindString(6, iccid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SwitchsEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getHardwareId());
 
        String protocolId = entity.getProtocolId();
        if (protocolId != null) {
            stmt.bindString(3, protocolId);
        }
 
        String switchName = entity.getSwitchName();
        if (switchName != null) {
            stmt.bindString(4, switchName);
        }
 
        String paramState = entity.getParamState();
        if (paramState != null) {
            stmt.bindString(5, paramState);
        }
 
        String iccid = entity.getIccid();
        if (iccid != null) {
            stmt.bindString(6, iccid);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SwitchsEntity readEntity(Cursor cursor, int offset) {
        SwitchsEntity entity = new SwitchsEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // hardwareId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // protocolId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // switchName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // paramState
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // iccid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SwitchsEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHardwareId(cursor.getInt(offset + 1));
        entity.setProtocolId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSwitchName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setParamState(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIccid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SwitchsEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SwitchsEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SwitchsEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
