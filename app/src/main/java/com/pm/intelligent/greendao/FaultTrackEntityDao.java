package com.pm.intelligent.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pm.intelligent.bean.FaultTrackEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FAULT_TRACK_ENTITY".
*/
public class FaultTrackEntityDao extends AbstractDao<FaultTrackEntity, Long> {

    public static final String TABLENAME = "FAULT_TRACK_ENTITY";

    /**
     * Properties of entity FaultTrackEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TroubleId = new Property(1, int.class, "troubleId", false, "TROUBLE_ID");
        public final static Property TroubleName = new Property(2, String.class, "troubleName", false, "TROUBLE_NAME");
        public final static Property TroubleStatus = new Property(3, int.class, "troubleStatus", false, "TROUBLE_STATUS");
        public final static Property Iccid = new Property(4, String.class, "iccid", false, "ICCID");
        public final static Property TroubleTime = new Property(5, java.util.Date.class, "troubleTime", false, "TROUBLE_TIME");
        public final static Property UpdateTime = new Property(6, java.util.Date.class, "updateTime", false, "UPDATE_TIME");
        public final static Property ShelterName = new Property(7, String.class, "shelterName", false, "SHELTER_NAME");
        public final static Property ProjectName = new Property(8, String.class, "projectName", false, "PROJECT_NAME");
    }


    public FaultTrackEntityDao(DaoConfig config) {
        super(config);
    }
    
    public FaultTrackEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FAULT_TRACK_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TROUBLE_ID\" INTEGER NOT NULL UNIQUE ," + // 1: troubleId
                "\"TROUBLE_NAME\" TEXT," + // 2: troubleName
                "\"TROUBLE_STATUS\" INTEGER NOT NULL ," + // 3: troubleStatus
                "\"ICCID\" TEXT," + // 4: iccid
                "\"TROUBLE_TIME\" INTEGER," + // 5: troubleTime
                "\"UPDATE_TIME\" INTEGER," + // 6: updateTime
                "\"SHELTER_NAME\" TEXT," + // 7: shelterName
                "\"PROJECT_NAME\" TEXT);"); // 8: projectName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FAULT_TRACK_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FaultTrackEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTroubleId());
 
        String troubleName = entity.getTroubleName();
        if (troubleName != null) {
            stmt.bindString(3, troubleName);
        }
        stmt.bindLong(4, entity.getTroubleStatus());
 
        String iccid = entity.getIccid();
        if (iccid != null) {
            stmt.bindString(5, iccid);
        }
 
        java.util.Date troubleTime = entity.getTroubleTime();
        if (troubleTime != null) {
            stmt.bindLong(6, troubleTime.getTime());
        }
 
        java.util.Date updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(7, updateTime.getTime());
        }
 
        String shelterName = entity.getShelterName();
        if (shelterName != null) {
            stmt.bindString(8, shelterName);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(9, projectName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FaultTrackEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTroubleId());
 
        String troubleName = entity.getTroubleName();
        if (troubleName != null) {
            stmt.bindString(3, troubleName);
        }
        stmt.bindLong(4, entity.getTroubleStatus());
 
        String iccid = entity.getIccid();
        if (iccid != null) {
            stmt.bindString(5, iccid);
        }
 
        java.util.Date troubleTime = entity.getTroubleTime();
        if (troubleTime != null) {
            stmt.bindLong(6, troubleTime.getTime());
        }
 
        java.util.Date updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(7, updateTime.getTime());
        }
 
        String shelterName = entity.getShelterName();
        if (shelterName != null) {
            stmt.bindString(8, shelterName);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(9, projectName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FaultTrackEntity readEntity(Cursor cursor, int offset) {
        FaultTrackEntity entity = new FaultTrackEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // troubleId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // troubleName
            cursor.getInt(offset + 3), // troubleStatus
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // iccid
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // troubleTime
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // updateTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // shelterName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // projectName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FaultTrackEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTroubleId(cursor.getInt(offset + 1));
        entity.setTroubleName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTroubleStatus(cursor.getInt(offset + 3));
        entity.setIccid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTroubleTime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setUpdateTime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setShelterName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setProjectName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FaultTrackEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FaultTrackEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FaultTrackEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
