package com.pm.intelligent.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pm.intelligent.bean.ScenesEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCENES_ENTITY".
*/
public class ScenesEntityDao extends AbstractDao<ScenesEntity, Long> {

    public static final String TABLENAME = "SCENES_ENTITY";

    /**
     * Properties of entity ScenesEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProjectId = new Property(1, int.class, "projectId", false, "PROJECT_ID");
        public final static Property HardwareConfId = new Property(2, int.class, "hardwareConfId", false, "HARDWARE_CONF_ID");
        public final static Property ProtocolId = new Property(3, String.class, "protocolId", false, "PROTOCOL_ID");
        public final static Property HardwareId = new Property(4, int.class, "hardwareId", false, "HARDWARE_ID");
        public final static Property HardwareName = new Property(5, String.class, "hardwareName", false, "HARDWARE_NAME");
        public final static Property HardwareInfo = new Property(6, String.class, "hardwareInfo", false, "HARDWARE_INFO");
        public final static Property SettingValue = new Property(7, String.class, "settingValue", false, "SETTING_VALUE");
    }


    public ScenesEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ScenesEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCENES_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PROJECT_ID\" INTEGER NOT NULL ," + // 1: projectId
                "\"HARDWARE_CONF_ID\" INTEGER NOT NULL ," + // 2: hardwareConfId
                "\"PROTOCOL_ID\" TEXT," + // 3: protocolId
                "\"HARDWARE_ID\" INTEGER NOT NULL ," + // 4: hardwareId
                "\"HARDWARE_NAME\" TEXT UNIQUE ," + // 5: hardwareName
                "\"HARDWARE_INFO\" TEXT," + // 6: hardwareInfo
                "\"SETTING_VALUE\" TEXT);"); // 7: settingValue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCENES_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ScenesEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getProjectId());
        stmt.bindLong(3, entity.getHardwareConfId());
 
        String protocolId = entity.getProtocolId();
        if (protocolId != null) {
            stmt.bindString(4, protocolId);
        }
        stmt.bindLong(5, entity.getHardwareId());
 
        String hardwareName = entity.getHardwareName();
        if (hardwareName != null) {
            stmt.bindString(6, hardwareName);
        }
 
        String hardwareInfo = entity.getHardwareInfo();
        if (hardwareInfo != null) {
            stmt.bindString(7, hardwareInfo);
        }
 
        String settingValue = entity.getSettingValue();
        if (settingValue != null) {
            stmt.bindString(8, settingValue);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ScenesEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getProjectId());
        stmt.bindLong(3, entity.getHardwareConfId());
 
        String protocolId = entity.getProtocolId();
        if (protocolId != null) {
            stmt.bindString(4, protocolId);
        }
        stmt.bindLong(5, entity.getHardwareId());
 
        String hardwareName = entity.getHardwareName();
        if (hardwareName != null) {
            stmt.bindString(6, hardwareName);
        }
 
        String hardwareInfo = entity.getHardwareInfo();
        if (hardwareInfo != null) {
            stmt.bindString(7, hardwareInfo);
        }
 
        String settingValue = entity.getSettingValue();
        if (settingValue != null) {
            stmt.bindString(8, settingValue);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ScenesEntity readEntity(Cursor cursor, int offset) {
        ScenesEntity entity = new ScenesEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // projectId
            cursor.getInt(offset + 2), // hardwareConfId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // protocolId
            cursor.getInt(offset + 4), // hardwareId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // hardwareName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // hardwareInfo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // settingValue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ScenesEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProjectId(cursor.getInt(offset + 1));
        entity.setHardwareConfId(cursor.getInt(offset + 2));
        entity.setProtocolId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHardwareId(cursor.getInt(offset + 4));
        entity.setHardwareName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHardwareInfo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSettingValue(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ScenesEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ScenesEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ScenesEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
