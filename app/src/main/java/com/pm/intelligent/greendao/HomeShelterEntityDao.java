package com.pm.intelligent.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pm.intelligent.bean.HomeShelterEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOME_SHELTER_ENTITY".
*/
public class HomeShelterEntityDao extends AbstractDao<HomeShelterEntity, Long> {

    public static final String TABLENAME = "HOME_SHELTER_ENTITY";

    /**
     * Properties of entity HomeShelterEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ShelterName = new Property(1, String.class, "shelterName", false, "SHELTER_NAME");
        public final static Property Iccid = new Property(2, String.class, "iccid", false, "ICCID");
        public final static Property ProjectId = new Property(3, int.class, "projectId", false, "PROJECT_ID");
        public final static Property ProjectName = new Property(4, String.class, "projectName", false, "PROJECT_NAME");
    }


    public HomeShelterEntityDao(DaoConfig config) {
        super(config);
    }
    
    public HomeShelterEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOME_SHELTER_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SHELTER_NAME\" TEXT," + // 1: shelterName
                "\"ICCID\" TEXT UNIQUE ," + // 2: iccid
                "\"PROJECT_ID\" INTEGER NOT NULL ," + // 3: projectId
                "\"PROJECT_NAME\" TEXT);"); // 4: projectName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOME_SHELTER_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HomeShelterEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String shelterName = entity.getShelterName();
        if (shelterName != null) {
            stmt.bindString(2, shelterName);
        }
 
        String iccid = entity.getIccid();
        if (iccid != null) {
            stmt.bindString(3, iccid);
        }
        stmt.bindLong(4, entity.getProjectId());
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(5, projectName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HomeShelterEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String shelterName = entity.getShelterName();
        if (shelterName != null) {
            stmt.bindString(2, shelterName);
        }
 
        String iccid = entity.getIccid();
        if (iccid != null) {
            stmt.bindString(3, iccid);
        }
        stmt.bindLong(4, entity.getProjectId());
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(5, projectName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HomeShelterEntity readEntity(Cursor cursor, int offset) {
        HomeShelterEntity entity = new HomeShelterEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // shelterName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // iccid
            cursor.getInt(offset + 3), // projectId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // projectName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HomeShelterEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setShelterName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIccid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProjectId(cursor.getInt(offset + 3));
        entity.setProjectName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HomeShelterEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HomeShelterEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HomeShelterEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
